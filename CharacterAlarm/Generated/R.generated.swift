//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 10 colors.
  struct color {
    /// Color `alarm-card-background-gray`.
    static let alarmCardBackgroundGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "alarm-card-background-gray")
    /// Color `alarm-card-background-green`.
    static let alarmCardBackgroundGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "alarm-card-background-green")
    /// Color `brownColor`.
    static let brownColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "brownColor")
    /// Color `call-green`.
    static let callGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "call-green")
    /// Color `call-red`.
    static let callRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "call-red")
    /// Color `charalarm-default-gray`.
    static let charalarmDefaultGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "charalarm-default-gray")
    /// Color `charalarm-default-green`.
    static let charalarmDefaultGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "charalarm-default-green")
    /// Color `charalarm-default-pink`.
    static let charalarmDefaultPink = Rswift.ColorResource(bundle: R.hostingBundle, name: "charalarm-default-pink")
    /// Color `textColor`.
    static let textColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "textColor")
    /// Color `xxxxColor`.
    static let xxxxColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "xxxxColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "alarm-card-background-gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func alarmCardBackgroundGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.alarmCardBackgroundGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "alarm-card-background-green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func alarmCardBackgroundGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.alarmCardBackgroundGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "brownColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func brownColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.brownColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "call-green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func callGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.callGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "call-red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func callRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.callRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "charalarm-default-gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func charalarmDefaultGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.charalarmDefaultGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "charalarm-default-green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func charalarmDefaultGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.charalarmDefaultGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "charalarm-default-pink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func charalarmDefaultPink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.charalarmDefaultPink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "xxxxColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func xxxxColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.xxxxColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 22 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Resource`.
    static let resource = Rswift.FileResource(bundle: R.hostingBundle, name: "Resource", pathExtension: "")
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    /// Resource file `com-charalarm-yui-0.caf`.
    static let comCharalarmYui0Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-0", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-1.caf`.
    static let comCharalarmYui1Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-1", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-10.caf`.
    static let comCharalarmYui10Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-10", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-11.caf`.
    static let comCharalarmYui11Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-11", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-2.caf`.
    static let comCharalarmYui2Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-2", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-3.caf`.
    static let comCharalarmYui3Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-3", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-4.caf`.
    static let comCharalarmYui4Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-4", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-5.caf`.
    static let comCharalarmYui5Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-5", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-6.caf`.
    static let comCharalarmYui6Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-6", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-7.caf`.
    static let comCharalarmYui7Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-7", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-8.caf`.
    static let comCharalarmYui8Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-8", pathExtension: "caf")
    /// Resource file `com-charalarm-yui-9.caf`.
    static let comCharalarmYui9Caf = Rswift.FileResource(bundle: R.hostingBundle, name: "com-charalarm-yui-9", pathExtension: "caf")
    /// Resource file `comfused.png`.
    static let comfusedPng = Rswift.FileResource(bundle: R.hostingBundle, name: "comfused", pathExtension: "png")
    /// Resource file `normal.png`.
    static let normalPng = Rswift.FileResource(bundle: R.hostingBundle, name: "normal", pathExtension: "png")
    /// Resource file `pokemon.caf`.
    static let pokemonCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "pokemon", pathExtension: "caf")
    /// Resource file `resource.json`.
    static let resourceJson = Rswift.FileResource(bundle: R.hostingBundle, name: "resource", pathExtension: "json")
    /// Resource file `self-introduction.caf`.
    static let selfIntroductionCaf = Rswift.FileResource(bundle: R.hostingBundle, name: "self-introduction", pathExtension: "caf")
    /// Resource file `smile.png`.
    static let smilePng = Rswift.FileResource(bundle: R.hostingBundle, name: "smile", pathExtension: "png")
    /// Resource file `thumbnail.png`.
    static let thumbnailPng = Rswift.FileResource(bundle: R.hostingBundle, name: "thumbnail", pathExtension: "png")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Resource", withExtension: "")`
    static func resource(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.resource
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-0", withExtension: "caf")`
    static func comCharalarmYui0Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui0Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-1", withExtension: "caf")`
    static func comCharalarmYui1Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui1Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-10", withExtension: "caf")`
    static func comCharalarmYui10Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui10Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-11", withExtension: "caf")`
    static func comCharalarmYui11Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui11Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-2", withExtension: "caf")`
    static func comCharalarmYui2Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui2Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-3", withExtension: "caf")`
    static func comCharalarmYui3Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui3Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-4", withExtension: "caf")`
    static func comCharalarmYui4Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui4Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-5", withExtension: "caf")`
    static func comCharalarmYui5Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui5Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-6", withExtension: "caf")`
    static func comCharalarmYui6Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui6Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-7", withExtension: "caf")`
    static func comCharalarmYui7Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui7Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-8", withExtension: "caf")`
    static func comCharalarmYui8Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui8Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "com-charalarm-yui-9", withExtension: "caf")`
    static func comCharalarmYui9Caf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comCharalarmYui9Caf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "comfused", withExtension: "png")`
    static func comfusedPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.comfusedPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "normal", withExtension: "png")`
    static func normalPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.normalPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pokemon", withExtension: "caf")`
    static func pokemonCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pokemonCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "resource", withExtension: "json")`
    static func resourceJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.resourceJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "self-introduction", withExtension: "caf")`
    static func selfIntroductionCaf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.selfIntroductionCaf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "smile", withExtension: "png")`
    static func smilePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.smilePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "thumbnail", withExtension: "png")`
    static func thumbnailPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.thumbnailPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 30 images.
  struct image {
    /// Image `alarm-add-icon`.
    static let alarmAddIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "alarm-add-icon")
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `call-alarm`.
    static let callAlarm = Rswift.ImageResource(bundle: R.hostingBundle, name: "call-alarm")
    /// Image `character-placeholder`.
    static let characterPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "character-placeholder")
    /// Image `comfused`.
    static let comfused = Rswift.ImageResource(bundle: R.hostingBundle, name: "comfused")
    /// Image `common-back-icon`.
    static let commonBackIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "common-back-icon")
    /// Image `common-icon-close`.
    static let commonIconClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "common-icon-close")
    /// Image `momiji`.
    static let momiji = Rswift.ImageResource(bundle: R.hostingBundle, name: "momiji")
    /// Image `normal`.
    static let normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "normal")
    /// Image `profile-call-end`.
    static let profileCallEnd = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile-call-end")
    /// Image `profile-call`.
    static let profileCall = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile-call")
    /// Image `profile-check`.
    static let profileCheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile-check")
    /// Image `profile-menu-icon`.
    static let profileMenuIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile-menu-icon")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `sd-angly`.
    static let sdAngly = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd-angly")
    /// Image `sd-close`.
    static let sdClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd-close")
    /// Image `sd-expressionless`.
    static let sdExpressionless = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd-expressionless")
    /// Image `sd-happly`.
    static let sdHapply = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd-happly")
    /// Image `sd-normal`.
    static let sdNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd-normal")
    /// Image `sd-sad`.
    static let sdSad = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd-sad")
    /// Image `sd-smile`.
    static let sdSmile = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd-smile")
    /// Image `sd-suprised`.
    static let sdSuprised = Rswift.ImageResource(bundle: R.hostingBundle, name: "sd-suprised")
    /// Image `smile`.
    static let smile = Rswift.ImageResource(bundle: R.hostingBundle, name: "smile")
    /// Image `thumbnail`.
    static let thumbnail = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbnail")
    /// Image `top-alarm`.
    static let topAlarm = Rswift.ImageResource(bundle: R.hostingBundle, name: "top-alarm")
    /// Image `top-config`.
    static let topConfig = Rswift.ImageResource(bundle: R.hostingBundle, name: "top-config")
    /// Image `top-news`.
    static let topNews = Rswift.ImageResource(bundle: R.hostingBundle, name: "top-news")
    /// Image `top-person`.
    static let topPerson = Rswift.ImageResource(bundle: R.hostingBundle, name: "top-person")
    /// Image `tutorial-alarm-screen-shot`.
    static let tutorialAlarmScreenShot = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial-alarm-screen-shot")
    /// Image `tutorial-chara-list-screen-shot`.
    static let tutorialCharaListScreenShot = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial-chara-list-screen-shot")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alarm-add-icon", bundle: ..., traitCollection: ...)`
    static func alarmAddIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alarmAddIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "call-alarm", bundle: ..., traitCollection: ...)`
    static func callAlarm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.callAlarm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "character-placeholder", bundle: ..., traitCollection: ...)`
    static func characterPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.characterPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "comfused", bundle: ..., traitCollection: ...)`
    static func comfused(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comfused, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "common-back-icon", bundle: ..., traitCollection: ...)`
    static func commonBackIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonBackIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "common-icon-close", bundle: ..., traitCollection: ...)`
    static func commonIconClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonIconClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "momiji", bundle: ..., traitCollection: ...)`
    static func momiji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.momiji, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "normal", bundle: ..., traitCollection: ...)`
    static func normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile-call", bundle: ..., traitCollection: ...)`
    static func profileCall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileCall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile-call-end", bundle: ..., traitCollection: ...)`
    static func profileCallEnd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileCallEnd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile-check", bundle: ..., traitCollection: ...)`
    static func profileCheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileCheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile-menu-icon", bundle: ..., traitCollection: ...)`
    static func profileMenuIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileMenuIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd-angly", bundle: ..., traitCollection: ...)`
    static func sdAngly(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdAngly, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd-close", bundle: ..., traitCollection: ...)`
    static func sdClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd-expressionless", bundle: ..., traitCollection: ...)`
    static func sdExpressionless(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdExpressionless, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd-happly", bundle: ..., traitCollection: ...)`
    static func sdHapply(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdHapply, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd-normal", bundle: ..., traitCollection: ...)`
    static func sdNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd-sad", bundle: ..., traitCollection: ...)`
    static func sdSad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdSad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd-smile", bundle: ..., traitCollection: ...)`
    static func sdSmile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdSmile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sd-suprised", bundle: ..., traitCollection: ...)`
    static func sdSuprised(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sdSuprised, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smile", bundle: ..., traitCollection: ...)`
    static func smile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thumbnail", bundle: ..., traitCollection: ...)`
    static func thumbnail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbnail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top-alarm", bundle: ..., traitCollection: ...)`
    static func topAlarm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topAlarm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top-config", bundle: ..., traitCollection: ...)`
    static func topConfig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topConfig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top-news", bundle: ..., traitCollection: ...)`
    static func topNews(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topNews, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top-person", bundle: ..., traitCollection: ...)`
    static func topPerson(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topPerson, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tutorial-alarm-screen-shot", bundle: ..., traitCollection: ...)`
    static func tutorialAlarmScreenShot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialAlarmScreenShot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tutorial-chara-list-screen-shot", bundle: ..., traitCollection: ...)`
    static func tutorialCharaListScreenShot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialCharaListScreenShot, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
